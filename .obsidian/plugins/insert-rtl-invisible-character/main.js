/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InsertInvisibleRTL
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  showStatusBar: true,
  showRightClick: true
};
var InsertInvisibleRTL = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const onClickStatusBarItem = (evt) => {
      if (2 === evt.button) {
        new MoreInfoModal(this.app).open();
      } else {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        const noticeContent = document.createDocumentFragment();
        if (!view || !view.editor) {
          noticeContent.createEl("div", {
            text: "\u26A0\uFE0F No valid Markdown file or position found!",
            attr: { style: "font-size: 1.2em;" }
          });
          new import_obsidian.Notice(noticeContent, 2e3);
          return;
        }
        const editor = view.editor;
        noticeContent.createEl("div", {
          text: "\u{1F514} Character has been inserted!",
          attr: { style: "font-size: 1.2em;" }
        });
        editor.replaceSelection("\u061C");
        new import_obsidian.Notice(noticeContent, 2e3);
      }
    };
    let statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setAttr("id", "statusButton");
    statusBarItemEl.setAttr("aria-label", "Insert a Invisible RTL Character (click right for more info)");
    statusBarItemEl.setAttr("aria-label-position", "top");
    statusBarItemEl.addClass("mod-clickable");
    statusBarItemEl.onClickEvent((this, onClickStatusBarItem));
    statusBarItemEl.style.display = "block";
    const languageIcon1 = (0, (0, import_obsidian.getIcon)("pilcrow"));
    languageIcon1.style.transform = "rotateY(180deg)";
    statusBarItemEl.appendChild(languageIcon1);
    statusBarItemEl = statusBarItemEl.createEl("span");
    statusBarItemEl.setText("InsertRTL");
    statusBarItemEl.style.marginLeft = "5px";
    this.addSettingTab(new TabsForSettings(this.app, this));
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu) => {
        if (this.settings.showRightClick) {
          menu.addItem((item) => {
            item.setTitle("InsertRTL").setIcon("pilcrow").onClick((evt) => {
              onClickStatusBarItem(evt);
            });
          });
        }
      })
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async changeStatusBar() {
    const statusBarItemEl = document.getElementById("statusButton");
    if (!statusBarItemEl) {
      return;
    }
    statusBarItemEl.style.display = this.settings.showStatusBar ? "block" : "none";
  }
};
var MoreInfoModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("This Plugin Insert a invisible RTL Character (U+061C) in Unicode \u{1D400}\u{1D405}\u{1D413}\u{1D404}\u{1D411} the cursor, so that other Plugins or programs can correctly display RTL text even if the First Character is in LTR languages.");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var TabsForSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Plugin Button Display" });
    new import_obsidian.Setting(containerEl).setName("Show/Hide from Status Bar").setDesc("turn on to show insert button, or turn off to hide.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showStatusBar).onChange((value) => {
        this.plugin.settings.showStatusBar = !this.plugin.settings.showStatusBar;
        this.plugin.saveSettings();
        this.plugin.changeStatusBar();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show/Hide from Right Click Menu").setDesc("turn on to show insert button, or turn off to hide.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showRightClick).onChange((value) => {
      this.plugin.settings.showRightClick = !this.plugin.settings.showRightClick;
      this.plugin.saveSettings();
    }));
  }
};
